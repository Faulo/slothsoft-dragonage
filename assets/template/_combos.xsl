<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet version="1.0"	xmlns="http://www.w3.org/1999/xhtml"	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">		<!--	<xsl:template match="/data">		<html>			<head><title>Slothsoft - Dragon Age Combos</title>			</head>						<body>				<xsl:apply-templates select=".//game"/>			</body>		</html>	</xsl:template>	-->		<xsl:template match="game">		<xsl:variable name="id" select="generate-id(.)"/>		<xsl:variable name="charList" select="character"/>		<xsl:variable name="classList" select="//combos/class"/>		<xsl:variable name="statusList" select="//combos/status"/>		<xsl:variable name="bombList" select="//combos/status[1]/bomb"/>		<xsl:variable name="resultList" select="//combos/result"/>		<article class="game">			<h2>About</h2>			<p>				Combo skill calculator yadda yadda.			</p>			<p>				<a href="http://dragonage.wikia.com/wiki/Combos_%28Inquisition%29" rel="external">Combos</a> in Dragon Age: Inquisition are a 2-step process:				First, you inflict a status ailment using a disabler skill. Then, you make the ailing enemy go boom by using a detonator skill.			</p>			<p>				For example:<br/>				An enemy is first hit with Winter's Grasp, gets frozen, and is then hit by someone's Mighty Blow, causing them to shatter.<br/>				<span><em data-effect="Freeze">Freeze</em> + <strong data-effect="Impact">Impact</strong> = <code data-effect="Shatter" title="Large cold damage bonus">Shatter</code></span>			</p>			<h2>Possible Results of Skill Combos</h2>			<table class="paintedTable">				<tbody>					<tr>						<td/>						<xsl:for-each select="$bombList">							<th><xsl:apply-templates select="." mode="name"/></th>						</xsl:for-each>					</tr>					<xsl:for-each select="$statusList">						<xsl:variable name="status" select="."/>						<tr>							<td><xsl:apply-templates select="$status" mode="name"/></td>							<xsl:for-each select="bomb">								<xsl:variable name="bomb" select="."/>								<xsl:variable name="result" select="$resultList[@name = current()/@result]"/>								<xsl:if test="$result">									<td><xsl:apply-templates select="$result" mode="name"/></td>								</xsl:if>							</xsl:for-each>						</tr>					</xsl:for-each>				</tbody>			</table>			<h2>Character Combo Matrix</h2>			<form method="POST" action="" id="{$id}">				<script type="application/javascript"><![CDATA[addEventListener(	"load",	function(eve) {		new ComboManager(document.getElementById("]]><xsl:value-of select="$id"/><![CDATA["));	},	false);				]]></script>				<table class="paintedTable">					<thead>						<th>Character</th>						<th>Disabler Skills/<br/>Available Status Effects</th>						<th>Detonator Skills/<br/>Available Detonations</th>						<th>Available Combo Effects</th>					</thead>					<tbody>						<xsl:for-each select="$charList">							<xsl:variable name="char" select="."/>							<xsl:variable name="disablerList" select="$classList[@name = current()/@class]/disabler"/>							<xsl:variable name="detonatorList" select="$classList[@name = current()/@class]/detonator"/>							<tr>								<td class="name">									<xsl:value-of select="@name"/>									<input type="hidden" value="{@name}" name="character[]"/>									<!--									<select>										<xsl:choose>											<xsl:when test="@class">												<xsl:attribute name="disabled">disabled</xsl:attribute>												<option><xsl:value-of select="@class"/></option>											</xsl:when>											<xsl:otherwise>												<xsl:for-each select="../class">													<option><xsl:value-of select="@name"/></option>												</xsl:for-each>											</xsl:otherwise>										</xsl:choose>									</select>									-->								</td>								<td class="list">									<dl>										<xsl:choose>											<xsl:when test="@class">												<xsl:call-template name="disablerList">													<xsl:with-param name="list" select="$disablerList"/>													<xsl:with-param name="char" select="$char"/>												</xsl:call-template>											</xsl:when>											<xsl:otherwise>												<xsl:for-each select="../class">													<xsl:call-template name="disablerList">														<xsl:with-param name="list" select="$classList[@name = current()/@name]/disabler"/>														<xsl:with-param name="char" select="$char"/>													</xsl:call-template>												</xsl:for-each>											</xsl:otherwise>										</xsl:choose>									</dl>									<ul>										<xsl:for-each select="$statusList">											<li>												<label>													<input type="checkbox" disabled="disabled" name="status-{$char/@name}-{@name}"/>													Can inflict <xsl:apply-templates select="." mode="name"/>												</label>											</li>										</xsl:for-each>									</ul>								</td>								<td class="list">									<dl>										<xsl:choose>											<xsl:when test="@class">												<xsl:call-template name="detonatorList">													<xsl:with-param name="list" select="$detonatorList"/>													<xsl:with-param name="char" select="$char"/>												</xsl:call-template>											</xsl:when>											<xsl:otherwise>												<xsl:for-each select="../class">													<xsl:call-template name="detonatorList">														<xsl:with-param name="list" select="$classList[@name = current()/@name]/detonator"/>														<xsl:with-param name="char" select="$char"/>													</xsl:call-template>												</xsl:for-each>											</xsl:otherwise>										</xsl:choose>									</dl>									<ul>										<xsl:for-each select="$bombList">											<li>												<label>													<input type="checkbox" disabled="disabled" name="bomb-{$char/@name}-{@name}"/>													Can detonate <xsl:apply-templates select="." mode="name"/>ish												</label>											</li>										</xsl:for-each>									</ul>								</td>								<td>									<dl>										<xsl:for-each select="$charList">											<xsl:sort select="@name = $char/@name" order="descending"/>											<xsl:variable name="comboChar" select="."/>											<dt>												<xsl:apply-templates select="$comboChar" mode="combo">													<xsl:with-param name="self" select="$char"/>												</xsl:apply-templates>											</dt>											<dd>												<ul>													<xsl:for-each select="$statusList">														<xsl:variable name="status" select="."/>														<xsl:for-each select="bomb">															<xsl:variable name="bomb" select="."/>															<xsl:variable name="result" select="$resultList[@name = current()/@result]"/>															<xsl:if test="$result">																<li hidden="hidden">																	<input type="hidden" name="result-{$char/@name}-{$comboChar/@name}-{$status/@name}-{$bomb/@name}"/>																	<span><xsl:apply-templates select="$result" mode="name"/> 〔<xsl:apply-templates select="$status" mode="name"/> + <xsl:apply-templates select="$bomb" mode="name"/> 〕</span>																</li>															</xsl:if>														</xsl:for-each>													</xsl:for-each>												</ul>											</dd>											<!--											<xsl:for-each select="$resultList">												<li hidden="hidden">													<input type="hidden" name="result-{$char/@name}-{$comboChar/@name}-{@name}"/>													<span>Can cause <xsl:apply-templates select="." mode="name"/> with <xsl:apply-templates select="$comboChar" mode="name"/></span>												</li>											</xsl:for-each>											-->										</xsl:for-each>									</dl>								</td>							</tr>						</xsl:for-each>					</tbody>				</table>			</form>		</article>	</xsl:template>		<xsl:template name="disablerList">		<xsl:param name="list" select="/.."/>		<xsl:param name="char" select="/.."/>		<dt><xsl:value-of select="$list/../@name"/>:</dt>		<dd>			<ul>				<xsl:for-each select="$list">					<li>						<label>							<input type="checkbox" value="{@name}" data-status="{@status}" data-character="{$char/@name}" name="disabler[]"/>							<span><xsl:value-of select="@name"/></span>						</label>					</li>				</xsl:for-each>			</ul>		</dd>	</xsl:template>		<xsl:template name="detonatorList">		<xsl:param name="list" select="/.."/>		<xsl:param name="char" select="/.."/>		<dt><xsl:value-of select="$list/../@name"/>:</dt>		<dd>			<ul>				<xsl:for-each select="$list">					<li>						<label>							<input type="checkbox" value="{@name}" data-bomb="{@bomb}" data-character="{$char/@name}" name="detonator[]"/>							<span><xsl:value-of select="@name"/></span>						</label>					</li>				</xsl:for-each>			</ul>		</dd>	</xsl:template>											<xsl:template match="status" mode="name">		<em data-effect="{@name}"><xsl:value-of select="@name"/></em>	</xsl:template>		<xsl:template match="bomb" mode="name">		<strong data-effect="{@name}"><xsl:value-of select="@name"/></strong>	</xsl:template>		<xsl:template match="result" mode="name">		<code data-effect="{@name}" title="{.}"><xsl:value-of select="@name"/></code>	</xsl:template>		<xsl:template match="character" mode="combo">		<xsl:param name="self" select="/.."/>		<span data-character="{@name}">			<xsl:choose>				<xsl:when test="@name = $self/@name">					By themselves:				</xsl:when>				<xsl:otherwise>					With <xsl:value-of select="@name"/>:				</xsl:otherwise>			</xsl:choose>		</span>	</xsl:template></xsl:stylesheet>